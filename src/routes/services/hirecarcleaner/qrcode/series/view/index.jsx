import { useEffect, useState } from "react"
import { useParams } from "react-router-dom"
import { GET, POST } from "../../../../../../api/fetch"
import URL from '../../../../../../api/urls'
import {
    Container,
    Row,
    Col,
    Table,
    Button,
    Modal,
    Form,
    Pagination
} from 'react-bootstrap'
import {
    useNavigate
} from 'react-router-dom'
import { MdArrowBackIos } from "react-icons/md"
import { setPagination } from '../../../../../../utility/commonFunctions'
import { DateTime } from "luxon"



const View = () => {
    
    const params = useParams()
    const navigate = useNavigate()

    const [data, setData] = useState([])
    const [formData, setFormData] = useState({})
    const [generatedCodeData, setGeneratedCodeData] = useState([])
    const [selectedPage, setSelectedPage] = useState(1)
    const [pages, setPages] = useState([])
    const [imageData, setImageData] = useState(null)
    

    const fetchData = async () => {
        
        const {data, error} = await GET(URL.QRCODE_SERIES.SERIES + "/" + params.id)
        if(data){
            setData(data)
            setGeneratedCodeData(setPagination(data[0].qr_codes.filter(qrcode => qrcode.data.image_data)))
        }
        
        
    }

    useEffect(() => {
        fetchData()
    }, [])

    useEffect(() => {
        console.log(generatedCodeData)
        if(generatedCodeData.length){
            const pagesCount = []
            for(let i = 1; i <= generatedCodeData[0].pages; i++){
                pagesCount.push(i)
            }
            setPages(pagesCount)
        }
    }, [generatedCodeData])
   
    useEffect(() => {
        if(imageData && imageData.image_data){
            console.log(imageData.image_data)
        }
    }, [imageData])

    return(
        data && <>
            <Container fluid className='pt-2'>
                <Row>
                    <Col lg={10}>
                        
                        <h3 className='pageTitle'> <MdArrowBackIos size={28} onClick={() => navigate(-1)} style={{ cursor: "pointer" }}/> { data.length && data[0].value }</h3>
                    </Col>
                </Row>

                <Row className='mt-2'>
                    <h4 className="mb-3 pageTitle">QR Code Series Information</h4>
                    {    
                        <>
                            <Col>
                                <Row>
                                    <Col lg={4}>Series ID</Col>
                                    <Col>{ data.length && data[0].series_id }</Col>
                                </Row>
                                <Row>
                                    <Col lg={4}>Series Name</Col>
                                    <Col>{ data.length && data[0].value }</Col>
                                </Row>
                                <Row>
                                    <Col lg={4}>QR Code Range</Col>
                                    <Col>{ data.length && data[0].range }</Col>
                                </Row>
                            </Col>
                            <Col>
                                <Row>
                                    <Col lg={4}>In Use</Col>
                                    <Col>{ data.length && data[0].is_in_use ?  'Yes' : 'No'}</Col>
                                </Row>
                                <Row>
                                    <Col lg={4}>Generated Range</Col>
                                    <Col>{ data.length && data[0].generated_range }</Col>
                                </Row>
                            </Col>
                        </>
                    }  
                </Row>
                <hr></hr>

                <Row className='mt-2'>
                    <Row>
                        <Col lg={11}>
                            <h4 className="mb-3 pageTitle">Generated QR Codes</h4>
                        </Col>
                        <Col style={{ textAlign: 'right' }}>
                               
                        </Col>
                    </Row>
                    <Row>


                        <Col>
                            <Table className="m-2" bordered striped hover>
                                <thead>
                                    <tr style={{ textAlign: 'center' }}>
                                        <th>#</th>
                                        <th>QR Code ID</th>
                                        <th>Is Active</th>
                                        <th>Assigned To</th>
                                        <th>Generated At</th>
                                        <th>Generated By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                {
                                    generatedCodeData && generatedCodeData.length && generatedCodeData[0] && generatedCodeData[0].data && Object.keys(generatedCodeData[0].data).length > 0 && generatedCodeData[0].data[selectedPage - 1].data.map((qrcode, index) => {
                                        return (
                                            qrcode.data.image_data && <>
                                                <tr key={index}>
                                                    <td style={{ textAlign: 'center' }}>{index + 1}</td>
                                                    <td><a className="text=primary" style={{ cursor: 'pointer' }} onClick={() => setImageData({name: "NA", image_data: qrcode.data.image_data})}>{qrcode.qr_code_id}</a></td>
                                                    <td>{qrcode.is_active ? 'Yes' : 'No'}</td>
                                                    <td>{qrcode.assigned_to || '-'}</td>
                                                    <td style={{ textAlign: 'center' }}>{DateTime.fromISO(qrcode.data.generated_at).toISODate()}</td>
                                                    <td>{qrcode.data.generated_by || '-'}</td>
                                                    <td>{'-'}</td>
                                                </tr>
                                            </>
                                        )
                                    })
                                }
                                </tbody>
                            </Table>
                        </Col>
                    </Row>
                    <Row className="mt-2">
                        <Col></Col>
                        {/* <Col style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end' }}>
                            <Pagination>
                                {
                                    pages && pages.map(pageNumber => {
                                        return (
                                            <Pagination.Item onClick={() => setSelectedPage(pageNumber)} key={pageNumber} active={pageNumber === selectedPage}>
                                                {pageNumber}
                                            </Pagination.Item>
                                        )
                                    })
                                }
                            </Pagination>
                        </Col> */}
                    </Row>
                </Row>
                <hr></hr>



            </Container>
            
            <Modal size="lg" centered show={imageData != null} onHide={() => setImageData(null)}>
                <Modal.Header closeButton>
                {/* <Modal.Title>{imageData && imageData.name}</Modal.Title> */}
                </Modal.Header>
                <Modal.Body style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                    {/* { imageData && <img src={imageData.image_data} alt={imageData.name} /> } */}
                    { imageData && <div dangerouslySetInnerHTML={{ __html: imageData.image_data }} /> }
                </Modal.Body>
                <Modal.Footer>
                <Button variant="primary" type='submit' onClick={() => setImageData(null)}>
                    Close
                </Button>
                </Modal.Footer>
            </Modal>
        </>
    )
}

export default View